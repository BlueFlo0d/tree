(in-package #:tree)
;;; Setup audio
(setf *s*
      (make-external-server
       "localhost"
       :port 48800
       :server-options
       (make-server-options
        ;;:device "ZoomAudioD"
        :num-input-bus 0
        )))
(server-boot *s*)
;; (server-quit *s*)
(defparameter *echo-bus* (bus-audio :chanls 2))
(defparameter *saw-bus* (bus-audio :chanls 2))
(defparameter *pluck-bus* (bus-audio :chanls 2))
(defparameter *perc-bus* (bus-audio :chanls 2))
(defparameter *master-bus* (bus-audio :chanls 2))
(proxy :master
       (let* ((sig (in.ar *master-bus* 2))
              (sig (compander.ar sig sig 0.3 1.0 0.7 0.01 0.1 :mul 0.3))
              (sig (clip.ar (limiter.ar sig) -1 1)))
         (out.ar 0 sig)))
(proxy :echo
       (let* ((sig (in.ar *echo-bus* 2))
              (sig (hpf.ar sig 100))
              (sig (freeverb2.ar (car sig) (cadr sig) :mix 1.0 :room 4)))
         (out.ar *master-bus* sig)))
(proxy :saw
       (let* ((sig (in.ar *saw-bus* 2))
              (sig (compander.ar sig sig 0.3 1.0 0.3 0.01 0.1 :mul 2)))
         (out.ar *master-bus* sig)))
(proxy :pluck
       (let* ((sig (in.ar *pluck-bus* 2))
              (sig (compander.ar sig sig 0.3 1.0 0.3 0.01 0.1 :mul 2)))
         (out.ar *master-bus* sig)))
(proxy :perc
       (let* ((sig (in.ar *perc-bus* 2))
              (sig (compander.ar sig sig 0.3 1.0 0.3 0.1 0.1 :mul 2)))
         (out.ar *master-bus* (leak-dc.ar sig))))

(defsynth sawsynth ((gate 1) (freq 440)
                    (amp 0.5) (pan 0) (octave 0)
                    (intensity 0.5) (decay 0.5) (mutate 0.0)
                    (reverb 0.25))
  (let* ((cutoff (expt (/ 20000.00 freq) intensity))
         (decay (* 0.2 (expt 20.0 decay)))
         (reverb (expt reverb 2))
         (amp (* amp (expt 100.0 (sqrt mutate))))
         (freq (* freq (expt 2 octave)))
         (env (env-gen.kr (env (list 1 0.5 0) (list 0.1 decay) (list -2 -2)) :gate gate :act :free))
         (fenv (env-gen.kr (perc 0.0 (/ 5 freq)) :level-scale (* 3.0 freq) :level-bias freq))
         (fenv (+ fenv (* (env-gen.kr (env (list 0 1) (list 0.5) (list 2)))
                          (sin-osc.kr 3 0 (* 0.02 freq)))))
         (cenv (env-gen.kr (perc 0.0 (* decay 2) 1.0 -2.0) :level-scale (* cutoff freq) :level-bias freq))
         (sig (+
               (pan-b2.ar (pulse.ar (* 1.01 fenv) 0.2) (+ pan 0.2))
               (pan-b2.ar (pulse.ar (* 0.99 fenv) 0.2) (+ pan -0.2))
               (pan-b2.ar (pulse.ar (* 1 fenv) 0.3) pan)))
         (sig (apply #'decode-b2.ar (cons 2 sig)))
         (sig (rlpf.ar sig cenv))
         (sig (/ (sin (* sig amp env)) (+ 0.3 (* 9 mutate))))
         (sig (sanitize.ar (* sig gate (+ 1 (* intensity mutate (saw.ar (/ fenv 4))))))))
    (out.ar *saw-bus* (* sig (- 1.0 reverb)))
    (out.ar *echo-bus* (* sig reverb))))
(defsynth plucksynth ((gate 1) (freq 440)
                      (amp 0.5) (pan 0) (octave 1)
                      (intensity 0.1) (decay 0.5) (mutate 0.0)
                      (reverb 0.1) (lfo 0))
  (let* ((freq (* freq (expt 2 octave)))
         (freq (* freq (+ 1 (sin-osc.kr 3 0 0.002))))
         (reverb (expt reverb 2))
         (amp (/ (* amp (expt 20.0 (sqrt mutate))) (+ 1 decay)))
         (decay (* 0.5 (expt 100.0 decay)))
         (lfo (* 40.0 (sqrt lfo)))
         (env (env-gen.kr (env (list 1 1 0) (list 0 (/ decay 16)) (list 0 -2))
                          :gate (* gate (impulse.kr lfo 0))))
         (inp (* (lf-clip-noise.ar 2000 (/ amp 3)) env))
         (sig (sanitize.ar (dwg-plucked.ar freq amp 1 0.1 2 (/ 500 (expt 500.0 intensity)) inp)))
         (sig (* (leak-dc.ar sig) gate)))
    (let* ((b (pan-b2.ar sig pan amp))
           (panned (apply #'decode-b2.ar (cons 2 b)))
           (panned (leak-dc.ar (sanitize.ar (/ (sin panned) (+ 0.4 (* 8 mutate)))))))
      (free-self.kr (product (detect-silence.ar panned 0.0001)))
      (out.ar *pluck-bus* (* panned (- 1 reverb)))
      (out.ar *echo-bus* (* panned reverb)))))
(defsynth percsynth ((gate 1) (freq 440)
                     (amp 0.2) (pan 0) (octave 1)
                     (intensity 0.1) (decay 0.5) (mutate 0.0)
                     (reverb 0.1) (lfo 0))
  (let* ((env (env-gen.kr (env (list 1 1 0) (list 0 (/ decay 16)) (list 0 -2))
                          :gate (* gate (impulse.kr lfo 0))))
         (fenv (env-gen.kr (perc 0.0 0.01)))
         (amp (* amp 0.3 (expt 50.0 intensity)))
         (tension (* freq 0.0015))
         (tension (* tension tension))
         (inp (* (+ (* (sin-osc.ar (+ 40 (* fenv 5000))) (- 1.0 intensity))
                    (* (white-noise.ar) intensity))
                 env))
         (sig (leak-dc.ar (sanitize.ar (membrane-hexagon.ar inp tension (- 1 (/ 1 (+ 10 (expt 10000 (expt decay 0.3))))) amp))))
         (sig (leak-dc.ar (/ (clip.ar (+ (* mutate (sin sig))
                                         (* (- 1.0 mutate) sig))
                                      -1 1)
                             (+ 0.3 (* 0.3 intensity))))))
    (let* ((b (pan-b2.ar sig pan))
           (panned (apply #'decode-b2.ar (cons 2 b)))
           (panned (compander.ar panned panned 0.3 1.0 0.3 0.07 0.1 :mul gate))
           (panned (leak-dc.ar (sanitize.ar (clip.ar panned -1 1)))))
      (free-self.kr (product (detect-silence.ar panned 0.01)))
      (out.ar *perc-bus* (* panned (- 1 reverb)))
      (out.ar *echo-bus* (* panned reverb)))))
;; (setq test-synth (synth 'percsynth :freq 55.0 :amp 0.2 :pan 0.0d0 :intensity 0.2 :decay 0.2 :reverb 0.0 :mutate 0.0))

;; (release test-synth)
;; (free test-synth)
;; (group-free-all)
;; (server-query-all-nodes)
